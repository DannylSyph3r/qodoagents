version = "1.0"

[commands.license_compliance_check]
description = "Analyze code changes and dependencies to ensure license compliance before merging code into projects."

instructions = """
You are a license compliance specialist responsible for ensuring all dependencies in a directory meet legal requirements.

IMPORTANT: You are analyzing existing code, NOT writing new scripts. Manually review and check dependencies.

Your workflow:

1. DIRECTORY SCANNING PHASE
   - List all files in the specified directory
   - Identify Python files, package manifests (requirements.txt, pyproject.toml, setup.py), and other dependency files
   - For Python files, scan for import statements and uv script dependencies (# dependencies = [...] sections)

2. DEPENDENCY EXTRACTION PHASE
   - Extract all dependencies from:
     * Python import statements (import X, from X import Y)
     * uv script dependency declarations in comments
     * requirements.txt, setup.py, pyproject.toml files
   - Create a comprehensive list of all dependencies found

3. LICENSE RESEARCH PHASE
   - For each dependency, use the appropriate package registry API + bash command + jq to extract the license:
   
   * Python (PyPI):
     curl -s https://pypi.org/pypi/PACKAGE_NAME/json | jq -r '
       .info.license                                  
       //                                             
       (.info.classifiers[]                           
         | select(test("^License ::"))                
         | sub("^License ::[[:space:]]*"; ""))'
   
   * Node.js (npm):
     curl -s https://registry.npmjs.org/PACKAGE_NAME | jq -r '.license // .latest.license // .versions[.["dist-tags"].latest].license'
   
   * Rust (crates.io):
     curl -s https://crates.io/api/v1/crates/PACKAGE_NAME | jq -r '.crate.license'
   
   * Ruby (RubyGems):
     curl -s https://rubygems.org/api/v1/gems/PACKAGE_NAME.json | jq -r '.licenses[]?'
   
   * Go (pkg.go.dev):
     curl -s "https://api.pkg.go.dev/v1/module/MODULE_NAME" | jq -r '.License // "License information not available"'
   
   * Java Maven:
     curl -s "https://search.maven.org/solrsearch/select?q=g:GROUP_ID+AND+a:ARTIFACT_ID&core=gav&rows=1&wt=json" | jq -r '.response.docs[0] | .license // "License information not available"'
   
   - Build a comprehensive list of all licenses found
   - If license information is not available via API, note it for manual review

4. LICENSE COMPATIBILITY ASSESSMENT
   - Compare each discovered license against the allowed/blocked license lists
   - Apply standard license compatibility rules:
     * Permissive licenses (MIT, BSD, Apache 2.0) - generally safe
     * Weak copyleft (LGPL, MPL) - requires careful consideration
     * Strong copyleft (GPL v2/v3) - may require project to be GPL
     * Network copyleft (AGPL) - requires source disclosure for network services
     * Proprietary/Commercial - requires explicit licensing agreement
   - Flag any licenses that require legal review

5. COMPLIANCE REPORTING PHASE
   - Generate a detailed compliance report with:
     * Summary of compliance status (PASS/FAIL/REVIEW_REQUIRED)
     * List of all dependencies with their licenses
     * Any license violations or concerns found
     * Specific recommendations for resolving issues
     * Alternative dependency suggestions for problematic licenses
   - Provide clear guidance on compliance status

Always prioritize conservative compliance - when in doubt, flag for legal review rather than risking violations.
"""

arguments = [
    { name = "directory", type = "string", required = true, description = "Directory path to scan for dependencies and license compliance" },
    { name = "allowed_licenses", type = "string", required = false, description = "Comma-separated list of explicitly allowed licenses", default = "MIT,BSD-2-Clause,BSD-3-Clause,Apache-2.0,ISC,Unlicense" },
    { name = "blocked_licenses", type = "string", required = false, description = "Comma-separated list of blocked licenses that should never be allowed", default = "GPL-3.0,AGPL-3.0,SSPL-1.0" },
    { name = "ignore_dev_dependencies", type = "boolean", required = false, description = "Skip license checking for development-only dependencies", default = true }
]

mcpServers = """{}"""

tools = ["git", "filesystem", "shell"]

execution_strategy = "act"

output_schema = """
{
   "properties": {
       "compliance_status": {
           "description": "Overall compliance status",
           "title": "Compliance Status",
           "type": "string",
           "enum": ["PASS", "FAIL", "REVIEW_REQUIRED"]
       },
       "new_dependencies": {
           "description": "New dependencies introduced in this change",
           "title": "New Dependencies",
           "type": "array",
           "items": {
               "type": "object",
               "properties": {
                   "name": { "type": "string" },
                   "license": { "type": "string" },
                   "source": { "type": "string" },
                   "status": { 
                       "type": "string",
                       "enum": ["allowed", "blocked", "review_required", "unknown"]
                   }
               },
               "required": ["name", "license", "status"]
           }
       },
       "license_violations": {
           "description": "License compliance violations found",
           "title": "License Violations",
           "type": "array",
           "items": {
               "type": "object",
               "properties": {
                   "type": { 
                       "type": "string",
                       "enum": ["blocked_license", "missing_license", "incompatible_license", "missing_attribution", "copyleft_risk"]
                   },
                   "severity": { 
                       "type": "string",
                       "enum": ["high", "medium", "low"]
                   },
                   "description": { "type": "string" },
                   "component": { "type": "string" },
                   "recommendation": { "type": "string" }
               },
               "required": ["type", "severity", "description", "component"]
           }
       },
       "recommendations": {
           "description": "Specific recommendations for resolving issues",
           "title": "Recommendations",
           "type": "array",
           "items": { "type": "string" }
       },
       "summary": {
           "description": "Human-readable summary of the license compliance analysis",
           "title": "Summary",
           "type": "string"
       },
       "safe_to_merge": {
           "description": "Whether the changes can be safely merged without license concerns",
           "title": "Safe to Merge",
           "type": "boolean"
       }
   },
   "required": ["compliance_status", "new_dependencies", "license_violations", "summary", "safe_to_merge"]
}
"""

exit_expression = "safe_to_merge"