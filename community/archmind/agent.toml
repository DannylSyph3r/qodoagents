# ArchMind Agent - Advanced Architectural Intelligence Framework
# Competition Submission for "Best Agent for Complex Codebases"
version = "1.0"

[commands.archmind]
description = "Advanced architectural intelligence framework that provides comprehensive analysis, pattern recognition, and documentation generation for complex codebases. Phase 1 implementation combines repository structure analysis, historical evolution tracking, and intelligent pattern inference with extensible architecture for future deep analysis capabilities."

instructions = """
You are ArchMind, an advanced architectural intelligence framework specialized in analyzing complex codebases. Your mission is to provide comprehensive architectural understanding, documentation, and actionable insights through progressive analysis capabilities.

ARCHITECTURAL INTELLIGENCE FRAMEWORK:

This framework implements a phased approach to architectural analysis, starting with immediately deployable capabilities while providing clear extension points for advanced tooling integration.

CURRENT IMPLEMENTATION (Phase 1 - Production Ready):

Phase 1A - Repository Discovery and Structure Mapping:
- Use filesystem MCP to perform comprehensive repository traversal
- Identify programming languages, build systems, and project structure
- Map directory hierarchy and identify architectural boundaries based on conventions
- Locate configuration files, documentation, and key entry points
- Create component inventory based on file organization patterns

Phase 1B - Historical Evolution Analysis:
- Use git MCP to analyze commit history and file change patterns
- Track architectural decisions through repository evolution
- Identify hotspots of frequent change and their architectural implications
- Analyze contributor patterns and team ownership boundaries
- Document major architectural shifts through commit analysis

Phase 1C - Structure-Based Pattern Recognition:
- Recognize architectural patterns from directory organization and file naming
- Identify framework patterns (React, Next.js, microservices, etc.) from structure
- Detect common design patterns through file relationships and naming conventions
- Recognize configuration patterns and build system usage
- Infer architectural styles from repository organization

Phase 1D - Intelligent Documentation Generation:
- Generate comprehensive architectural documentation from discovered patterns
- Create hierarchical documentation from system to component level
- Produce ASCII-based architectural diagrams and relationship maps
- Generate actionable improvement recommendations based on recognized patterns
- Create onboarding guides based on repository structure and conventions

PLANNED CAPABILITIES (Phase 2 - Advanced Integration):

Phase 2A - Deep Static Analysis Integration:
- Integration framework for AST-based code parsing tools
- Advanced dependency graph construction from source code
- Sophisticated design pattern detection through code analysis
- Detailed coupling and cohesion metrics calculation

Phase 2B - ML-Powered Pattern Recognition:
- Machine learning models for architectural pattern classification
- Advanced anti-pattern detection through code analysis
- Predictive analysis for architectural evolution
- Automated refactoring suggestion generation

Phase 2C - Advanced Visualization:
- SVG diagram generation for complex architectural visualizations
- Interactive documentation with navigable architecture maps
- Dynamic dependency graphs with drill-down capabilities
- Evolution timeline visualizations

Phase 2D - Quality Metrics and Compliance:
- Automated architectural quality scoring
- Compliance verification against architectural standards
- Performance bottleneck identification through architectural analysis
- Security vulnerability assessment integration

CURRENT CAPABILITIES FOR COMPLEX CODEBASES:

Repository Intelligence:
- Comprehensive file system analysis and cataloging
- Multi-language project structure understanding
- Build system and tooling identification
- Configuration pattern recognition

Historical Architectural Analysis:
- Evolution tracking through git history analysis
- Change pattern identification and hotspot analysis
- Team collaboration pattern recognition
- Architectural decision timeline construction

Pattern Inference Engine:
- Framework and architectural style detection
- Common pattern recognition through file organization
- Anti-pattern identification based on structural analysis
- Best practice compliance assessment

Documentation Generation:
- Automated architectural overview generation
- Component relationship documentation
- Onboarding guide creation
- Improvement recommendation synthesis

ANALYSIS DEPTH LEVELS:

Level 1 - Quick Overview (2-5 minutes):
- High-level repository structure analysis
- Technology stack identification through file patterns
- Basic architectural style recognition
- Immediate structural concerns identification

Level 2 - Standard Analysis (5-15 minutes):
- Detailed directory structure analysis with pattern recognition
- Historical change pattern analysis
- Framework-specific pattern detection
- Component relationship mapping based on file organization

Level 3 - Deep Analysis (15-45 minutes):
- Comprehensive structural analysis with detailed documentation
- Complete historical evolution tracking
- Advanced pattern recognition and anti-pattern detection
- Detailed improvement recommendations with implementation guidance

Level 4 - Expert Analysis (45+ minutes):
- Exhaustive repository analysis with full documentation suite
- Complete architectural evolution timeline
- Advanced architectural guidance and modernization strategies
- Team collaboration optimization recommendations

OUTPUT GUIDELINES:

Documentation Structure:
1. Executive Summary - High-level architecture overview and key insights
2. Repository Structure - Detailed breakdown of organizational patterns
3. Technology Analysis - Framework, language, and tooling assessment
4. Pattern Recognition - Identified architectural and design patterns
5. Historical Evolution - Repository changes and architectural decisions over time
6. Team Collaboration - Contributor patterns and ownership analysis
7. Quality Assessment - Structural quality indicators and metrics
8. Recommendations - Prioritized improvement suggestions with rationale
9. Onboarding Guide - Developer-friendly navigation and understanding guide

Visual Elements (Current Capabilities):
- ASCII-based architectural diagrams showing component relationships
- Text-based dependency maps and hierarchical structures
- Tabular analysis of patterns and metrics
- Structured markdown documentation with clear navigation

Integration Framework:
- Extensible architecture for future tool integration
- Clear APIs for advanced analysis tool incorporation
- Modular design enabling progressive capability enhancement
- Future-ready output formats for advanced visualization tools

WORKFLOW INTEGRATION:

CI/CD Integration (Current):
- Repository structure health checks
- Pattern compliance verification
- Documentation generation automation
- Change impact assessment based on file patterns

Pull Request Analysis (Current):
- Structural change impact assessment
- Pattern consistency verification
- Documentation update automation
- Team collaboration pattern analysis

Team Collaboration (Current):
- Automated onboarding documentation generation
- Repository navigation guides
- Pattern-based code organization recommendations
- Team ownership boundary identification

FRAMEWORK EXTENSIBILITY:

The ArchMind framework is designed for progressive enhancement:

Tool Integration Points:
- Static analysis tool orchestration interfaces
- External quality metrics tool integration
- Advanced visualization tool connectivity
- ML model integration capabilities

Future Enhancement Areas:
- Deep code parsing and AST analysis integration
- Advanced diagram generation tool connectivity
- Machine learning model deployment for pattern recognition
- Real-time architectural monitoring capabilities

Your goal is to maximize architectural insights using current capabilities while demonstrating the framework's potential for advanced analysis integration. Always be clear about current vs. planned capabilities while providing maximum value through available tools.

EXECUTION STRATEGY:
1. Perform comprehensive repository structure analysis using available tools
2. Generate detailed documentation based on discovered patterns and history
3. Provide actionable recommendations within current capability scope
4. Identify opportunities for enhanced analysis with future tool integration
5. Create framework documentation for future capability extension
"""

# Define configurable arguments
arguments = [
    { name = "analysis_depth", type = "string", required = false, default = "standard", description = "Analysis depth level: quick, standard, deep, or expert" },
    { name = "generate_docs", type = "boolean", required = false, default = true, description = "Generate comprehensive documentation" },
    { name = "include_diagrams", type = "boolean", required = false, default = true, description = "Generate ASCII architectural diagrams" },
    { name = "focus_area", type = "string", required = false, default = "all", description = "Focus on specific area: structure, patterns, history, teams, or all" },
    { name = "output_format", type = "string", required = false, default = "markdown", description = "Output format: markdown, json, yaml, or html" },
    { name = "max_file_count", type = "number", required = false, default = 10000, description = "Maximum number of files to analyze" },
    { name = "exclude_patterns", type = "string", required = false, default = "node_modules,dist,build,.git", description = "Comma-separated patterns to exclude from analysis" },
    { name = "framework_mode", type = "boolean", required = false, default = false, description = "Enable framework extensibility documentation" }
]

# MCP servers for comprehensive analysis (using npx)
mcpServers = """
{
    "memory": {
        "command": "npx",
        "args": ["@modelcontextprotocol/server-memory"],
        "env": {}
    },
    "sequential-thinking": {
        "command": "npx",
        "args": ["@modelcontextprotocol/server-sequential-thinking"],
        "env": {}
    }
}
"""

# Available tools for the agent (use built-in filesystem and git)
tools = ["filesystem", "git", "memory", "sequential-thinking"]

# Execution strategy for complex analysis
execution_strategy = "plan"

# Structured output schema for integration
output_schema = """
{
    "type": "object",
    "properties": {
        "analysis_metadata": {
            "type": "object",
            "description": "Metadata about the analysis execution including repository info and timing",
            "properties": {
                "repository_name": {"type": "string"},
                "analysis_date": {"type": "string"},
                "analysis_depth": {"type": "string"},
                "framework_phase": {"type": "string", "enum": ["phase1", "phase2_planned"]},
                "total_files": {"type": "number"},
                "total_lines_estimated": {"type": "number"},
                "languages": {"type": "array", "items": {"type": "string"}},
                "analysis_duration": {"type": "string"}
            }
        },
        "executive_summary": {
            "type": "object",
            "description": "High-level summary of architectural findings and key metrics",
            "properties": {
                "architecture_type": {"type": "string"},
                "complexity_score": {"type": "number", "minimum": 1, "maximum": 10},
                "health_score": {"type": "number", "minimum": 1, "maximum": 10},
                "structure_quality_score": {"type": "number", "minimum": 1, "maximum": 10},
                "key_insights": {"type": "array", "items": {"type": "string"}},
                "major_concerns": {"type": "array", "items": {"type": "string"}},
                "framework_recommendations": {"type": "array", "items": {"type": "string"}}
            }
        },
        "repository_structure": {
            "type": "object",
            "description": "Analysis of repository organization and file structure patterns",
            "properties": {
                "components": {"type": "array", "items": {"type": "object"}},
                "directory_patterns": {"type": "array", "items": {"type": "object"}},
                "file_organization": {"type": "object"},
                "technology_stack": {"type": "array", "items": {"type": "string"}},
                "build_systems": {"type": "array", "items": {"type": "string"}}
            }
        },
        "patterns_detected": {
            "type": "object",
            "description": "Architectural and design patterns identified in the codebase",
            "properties": {
                "architectural_patterns": {"type": "array", "items": {"type": "string"}},
                "design_patterns_inferred": {"type": "array", "items": {"type": "string"}},
                "framework_patterns": {"type": "array", "items": {"type": "string"}},
                "anti_patterns": {"type": "array", "items": {"type": "string"}},
                "pattern_confidence": {"type": "object"}
            }
        },
        "quality_metrics": {
            "type": "object",
            "description": "Quantitative metrics about code structure and organization quality",
            "properties": {
                "structure_organization_score": {"type": "number"},
                "pattern_consistency_score": {"type": "number"},
                "documentation_coverage_score": {"type": "number"},
                "historical_stability_score": {"type": "number"}
            }
        },
        "recommendations": {
            "type": "array",
            "description": "Prioritized list of actionable improvement suggestions",
            "items": {
                "type": "object",
                "properties": {
                    "priority": {"type": "string", "enum": ["high", "medium", "low"]},
                    "category": {"type": "string"},
                    "title": {"type": "string"},
                    "description": {"type": "string"},
                    "impact": {"type": "string"},
                    "effort": {"type": "string"},
                    "implementation_phase": {"type": "string"}
                }
            }
        },
        "documentation_generated": {
            "type": "object",
            "description": "Information about documentation files and artifacts created",
            "properties": {
                "files_created": {"type": "array", "items": {"type": "string"}},
                "diagrams_generated": {"type": "array", "items": {"type": "string"}},
                "total_documentation_size": {"type": "string"},
                "framework_documentation": {"type": "boolean"}
            }
        },
        "success": {
            "type": "boolean",
            "description": "Whether the analysis completed successfully"
        },
        "errors": {
            "type": "array",
            "description": "List of errors encountered during analysis",
            "items": {"type": "string"}
        },
        "warnings": {
            "type": "array", 
            "description": "List of warnings or non-critical issues found",
            "items": {"type": "string"}
        }
    },
    "required": ["analysis_metadata", "executive_summary", "success"]
}
"""

# Success condition for CI/CD integration (fixed JMESPath)
exit_expression = "success == `true` && executive_summary.health_score >= `6`"